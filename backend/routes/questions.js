const express = require('express');
const jwt = require('jsonwebtoken');
const { 
  getUsers, 
  getUserById, 
  updateUser, 
  getQuestions, 
  getQuestionById,
  getCampanhaConfig,
  logSecurityViolation 
} = require('../database/firebase');

const router = express.Router();

// Middleware para verificar token
const authenticateToken = (req, res, next) => {
  const token = req.headers.authorization?.replace('Bearer ', '');

  if (!token) {
    return res.status(401).json({
      error: 'Token n√£o fornecido',
      message: 'Token de autentica√ß√£o √© obrigat√≥rio'
    });
  }

  try {
    const decoded = jwt.verify(
      token, 
      process.env.JWT_SECRET || 'ga_quiz_secret_key_2024_bahia_education'
    );
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({
      error: 'Token inv√°lido',
      message: 'Token de autentica√ß√£o inv√°lido ou expirado'
    });
  }
};

// Fun√ß√£o para obter configura√ß√£o da campanha
async function getCampanhaConfigLocal() {
  try {
    const config = await getCampanhaConfig();
    return config || null;
  } catch (error) {
    console.error('Erro ao buscar configura√ß√£o da campanha:', error);
    return null;
  }
}

// Fun√ß√£o para obter o dia atual da campanha
async function getCurrentDay() {
  try {
    const config = await getCampanhaConfigLocal();
    
    if (!config) {
      console.log('‚ö†Ô∏è Nenhuma campanha ativa encontrada, usando dia 1 como padr√£o');
      return 1;
    }
    
    // Usar current_day da configura√ß√£o (atualizado automaticamente √† meia-noite)
    if (config.current_day !== undefined) {
      console.log(`üìÖ Usando current_day da configura√ß√£o: ${config.current_day}`);
      return config.current_day;
    }
    
    // Fallback: calcular baseado na data real (para compatibilidade)
    const dataInicio = new Date(config.data_inicio);
    const dataAtual = new Date();
    
    // Calcular diferen√ßa em dias
    const diffTime = dataAtual.getTime() - dataInicio.getTime();
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    
    // Se ainda n√£o come√ßou a campanha
    if (diffDays < 0) {
      console.log('üìÖ Campanha ainda n√£o come√ßou');
      return 0;
    }
    
    // Se a campanha j√° terminou
    if (diffDays >= config.duracao_dias) {
      console.log('üìÖ Campanha j√° terminou');
      return config.duracao_dias;
    }
    
    // Dia atual da campanha (1-based)
    const currentDay = diffDays + 1;
    
    console.log(`üìÖ Calculado dia atual da campanha: ${currentDay} (${config.duracao_dias} dias total)`);
    
    return currentDay;
  } catch (error) {
    console.error('Erro ao calcular dia atual:', error);
    return 1; // Fallback para dia 1
  }
}

// Fun√ß√£o para verificar se a resposta est√° atrasada
function isRespostaAtrasada(questionDay, currentDay) {
  return questionDay < currentDay;
}

// Fun√ß√£o para registrar tentativas de acesso n√£o autorizado
async function logSecurityViolationLocal(userId, action, details, req) {
  const timestamp = new Date().toISOString();
  console.log(`üö® VIOLA√á√ÉO DE SEGURAN√áA [${timestamp}]:`);
  console.log(`   üë§ Usu√°rio ID: ${userId}`);
  console.log(`   üéØ A√ß√£o: ${action}`);
  console.log(`   üìù Detalhes: ${details}`);
  console.log(`   üîç IP: ${req?.ip || 'N/A'}`);
  console.log(`   üåê User-Agent: ${req?.headers['user-agent'] || 'N/A'}`);
  
  // Salvar no banco de dados
  try {
    await logSecurityViolation(userId, action, details, req);
  } catch (error) {
    console.error('Erro ao salvar log de seguran√ßa:', error);
  }
}

// Rota para obter perguntas dispon√≠veis
router.get('/available', authenticateToken, async (req, res) => {
  try {
    const currentDay = await getCurrentDay();
    const userId = req.user.id;
    
    // Buscar configura√ß√£o da campanha
    const config = await getCampanhaConfigLocal();
    const maxDays = config ? config.duracao_dias : 4;
    
    console.log('üë§ User ID:', userId);
    console.log('üìÖ Dia atual da campanha:', currentDay);
    console.log('üìä M√°ximo de dias:', maxDays);
    
    // VALIDA√á√ÉO DE SEGURAN√áA: Verificar se a campanha est√° ativa
    if (currentDay === 0) {
      return res.status(403).json({
        error: 'Campanha n√£o iniciada',
        message: 'A campanha ainda n√£o come√ßou. Aguarde a data de in√≠cio.'
      });
    }
    
    if (currentDay > maxDays) {
      return res.status(403).json({
        error: 'Campanha finalizada',
        message: 'A campanha j√° foi finalizada.'
      });
    }

    // Buscar dados do usu√°rio
    const user = await getUserById(userId);

    if (!user) {
      return res.status(404).json({
        error: 'Usu√°rio n√£o encontrado',
        message: 'Usu√°rio n√£o existe'
      });
    }

    const availableQuestions = [];

    // Verificar quais perguntas est√£o dispon√≠veis baseado no dia atual
    for (let day = 1; day <= Math.min(currentDay, maxDays); day++) {
      const questionId = user[`id_q${day}`];
      const hasAnswered = user[`response_q${day}`];

      if (questionId) {
        // Buscar dados da pergunta
        const question = await getQuestionById(questionId);

        if (question) {
          
          availableQuestions.push({
            day: day,
            id: questionId,
            pergunta: question.pergunta,
            imagem: question.imagem,
            dica: question.dica,
            a1: question.a1,
            a2: question.a2,
            a3: question.a3,
            a4: question.a4,
            a5: question.a5,
            ac: question.ac,
            hasAnswered: hasAnswered,
            isAvailable: day <= currentDay
          });
        }
      }
    }

    // Filtrar apenas quest√µes dispon√≠veis (n√£o previews)
    const availableQuestionsFiltered = availableQuestions.filter(q => q.isAvailable && !q.hasAnswered);

    // Se n√£o h√° quest√µes dispon√≠veis, buscar a dica da pr√≥xima pergunta
    let nextHint = null;
    if (availableQuestionsFiltered.length === 0 && currentDay < maxDays) {
      const nextDay = currentDay + 1;
      const nextQuestionId = user[`id_q${nextDay}`];
      
      if (nextQuestionId) {
        const nextQuestion = await getQuestionById(nextQuestionId);

        if (nextQuestion) {
          nextHint = nextQuestion.dica;
        }
      }
    }

    res.json({
      success: true,
      currentDay: currentDay,
      maxDays: maxDays,
      questions: availableQuestionsFiltered,
      nextHint: nextHint
    });

  } catch (error) {
    console.error('Erro ao buscar perguntas:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      message: 'Erro ao buscar perguntas dispon√≠veis'
    });
  }
});

// Rota para responder pergunta
router.post('/answer', authenticateToken, async (req, res) => {
  try {
    console.log('üìù Recebendo resposta:', req.body);
    const { questionId, answer } = req.body;
    const userId = req.user.id;
    const currentDay = await getCurrentDay();
    
    console.log('üë§ User ID:', userId);
    console.log('üìÖ Dia atual:', currentDay);
    console.log('‚ùì Question ID:', questionId);
    console.log('‚úÖ Answer:', answer);

    // Validar dados de entrada
    if (!questionId || answer === undefined) {
      return res.status(400).json({
        error: 'Dados incompletos',
        message: 'ID da quest√£o e resposta s√£o obrigat√≥rios'
      });
    }

    // Buscar dados do usu√°rio
    const user = await getUserById(userId);

    if (!user) {
      return res.status(404).json({
        error: 'Usu√°rio n√£o encontrado',
        message: 'Usu√°rio n√£o existe'
      });
    }

    // Encontrar qual dia corresponde a esta quest√£o
    let questionDay = null;
    for (let day = 1; day <= 4; day++) {
      if (user[`id_q${day}`] === questionId) {
        questionDay = day;
        break;
      }
    }

    if (!questionDay) {
      await logSecurityViolationLocal(userId, 'TENTATIVA_ACESSO_QUESTAO_NAO_ATRIBUIDA', `Tentou acessar quest√£o ID ${questionId} que n√£o foi atribu√≠da`, req);
      return res.status(403).json({
        error: 'Acesso n√£o autorizado',
        message: 'Esta quest√£o n√£o foi atribu√≠da ao seu usu√°rio. Acesso bloqueado por seguran√ßa.'
      });
    }

    // VALIDA√á√ÉO DE SEGURAN√áA: Verificar se o dia est√° dispon√≠vel
    if (questionDay > currentDay) {
      await logSecurityViolationLocal(userId, 'TENTATIVA_ACESSO_FUTURO', `Tentou acessar quest√£o do dia ${questionDay}, dia atual: ${currentDay}`, req);
      return res.status(403).json({
        error: 'Acesso n√£o autorizado',
        message: 'Esta pergunta ainda n√£o foi liberada. Acesso bloqueado por seguran√ßa.'
      });
    }
    
    // VALIDA√á√ÉO ADICIONAL: Verificar se a campanha est√° ativa
    if (currentDay === 0) {
      return res.status(403).json({
        error: 'Campanha n√£o iniciada',
        message: 'A campanha ainda n√£o come√ßou.'
      });
    }

    // Verificar se j√° respondeu esta pergunta
    if (user[`response_q${questionDay}`]) {
      return res.status(400).json({
        error: 'Pergunta j√° respondida',
        message: 'Voc√™ j√° respondeu esta pergunta'
      });
    }

    // Buscar dados da pergunta
    const question = await getQuestionById(questionId);

    if (!question) {
      return res.status(404).json({
        error: 'Pergunta n√£o encontrada',
        message: 'Pergunta n√£o existe'
      });
    }
    // O frontend envia o √≠ndice (0-4), mas o backend tem a alternativa correta como 1-5
    // Ent√£o precisamos ajustar: answer + 1 === question.ac
    const isCorrect = (answer + 1) === question.ac;
    
    // Calcular XP base
    let xpGain = isCorrect ? 50 : -10; // -10 XP para resposta incorreta
    
    // Verificar se a resposta est√° atrasada
    const isAtrasada = isRespostaAtrasada(questionDay, currentDay);
    if (isCorrect && isAtrasada) {
      xpGain = 45; // Desconto de 5 pontos por atraso
      console.log('‚è∞ Resposta atrasada: -5 XP (45 ao inv√©s de 50)');
    }
    
    console.log('üîç Verificando resposta:');
    console.log('üìù Resposta enviada (√≠ndice):', answer);
    console.log('‚úÖ Alternativa correta (1-5):', question.ac);
    console.log('üéØ Resposta ajustada:', answer + 1);
    console.log('‚úÖ Est√° correto?', isCorrect);

    // Atualizar dados do usu√°rio
    const updates = {};

    // S√≥ marcar como respondida se acertou
    if (isCorrect) {
      updates[`response_q${questionDay}`] = true;
    }

    // Adicionar/remover XP
    updates.xp_atual = (user.xp_atual || 0) + xpGain;

    // Incrementar erros se errou
    if (!isCorrect) {
      updates.erros = (user.erros || 0) + 1;
      updates.respostas_incorretas = (user.respostas_incorretas || 0) + 1;
    }

    // Incrementar contador de respostas atrasadas se acertou mas est√° atrasada
    if (isCorrect && isAtrasada) {
      updates.respostas_atrasadas = (user.respostas_atrasadas || 0) + 1;
    }

    await updateUser(userId, updates);

    // Se acertou, buscar a dica da pr√≥xima quest√£o (m√°ximo dia 4)
    let nextHint = null;
    if (isCorrect && questionDay < 4) {
      const nextDay = questionDay + 1;
      const nextQuestionId = user[`id_q${nextDay}`];
      
      console.log('üîç Buscando dica da pr√≥xima quest√£o:');
      console.log('üìÖ Pr√≥ximo dia:', nextDay);
      console.log('‚ùì Pr√≥xima quest√£o ID:', nextQuestionId);
      
      if (nextQuestionId) {
        const nextQuestion = await getQuestionById(nextQuestionId);

        if (nextQuestion) {
          nextHint = nextQuestion.dica;
          console.log('üí° Dica encontrada:', nextHint);
        } else {
          console.log('‚ùå Pr√≥xima quest√£o n√£o encontrada');
        }
      } else {
        console.log('‚ùå Pr√≥xima quest√£o ID n√£o definida');
      }
    }

    res.json({
      success: true,
      isCorrect: isCorrect,
      xpGained: xpGain, // Mudando de xpGain para xpGained
      correctAnswer: question.ac,
      nextHint: nextHint,
      isAtrasada: isAtrasada,
      message: isCorrect 
        ? (isAtrasada 
          ? 'Parab√©ns! Resposta correta! +45 XP (resposta atrasada)' 
          : 'Parab√©ns! Resposta correta! +50 XP')
        : 'Ops! Resposta incorreta. -10 XP. Tente novamente!'
    });

  } catch (error) {
    console.error('Erro ao processar resposta:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      message: 'Erro ao processar resposta'
    });
  }
});

// Rota para obter informa√ß√µes da pr√≥xima pergunta
router.get('/next-question-info', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const currentDay = await getCurrentDay();
    
    // Buscar dados do usu√°rio
    const user = await getUserById(userId);

    if (!user) {
      return res.status(404).json({
        error: 'Usu√°rio n√£o encontrado',
        message: 'Usu√°rio n√£o existe'
      });
    }

    const nextDay = currentDay + 1;
    
    // Verificar se h√° pr√≥xima pergunta
    if (nextDay > 4) {
      return res.json({
        success: true,
        hasNextQuestion: false,
        message: 'Campanha finalizada'
      });
    }

    const nextQuestionId = user[`id_q${nextDay}`];
    
    if (!nextQuestionId) {
      return res.json({
        success: true,
        hasNextQuestion: false,
        message: 'N√£o h√° pr√≥xima pergunta'
      });
    }

    // Buscar dados da pr√≥xima pergunta
    const nextQuestion = await getQuestionById(nextQuestionId);

    if (!nextQuestion) {
      return res.json({
        success: true,
        hasNextQuestion: false,
        message: 'Pr√≥xima pergunta n√£o encontrada'
      });
    }
    
    // Calcular tempo at√© a pr√≥xima pergunta (baseado no fuso hor√°rio do Brasil)
    const now = new Date();
    const brazilTime = new Date(now.toLocaleString("en-US", {timeZone: "America/Sao_Paulo"}));
    const tomorrow = new Date(brazilTime);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);
    
    const timeUntilNext = tomorrow.getTime() - brazilTime.getTime();
    const hoursUntilNext = Math.floor(timeUntilNext / (1000 * 60 * 60));
    const minutesUntilNext = Math.floor((timeUntilNext % (1000 * 60 * 60)) / (1000 * 60));

    res.json({
      success: true,
      hasNextQuestion: true,
      nextDay: nextDay,
      nextQuestion: {
        id: nextQuestion.id,
        pergunta: nextQuestion.pergunta,
        dica: nextQuestion.dica
      },
      timeUntilNext: {
        hours: hoursUntilNext,
        minutes: minutesUntilNext,
        totalSeconds: Math.floor(timeUntilNext / 1000)
      }
    });

  } catch (error) {
    console.error('Erro ao buscar informa√ß√µes da pr√≥xima pergunta:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      message: 'Erro ao buscar informa√ß√µes da pr√≥xima pergunta'
    });
  }
});

// Rota para obter estat√≠sticas do usu√°rio
router.get('/stats', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;

    // Buscar dados do usu√°rio
    const user = await getUserById(userId);

    if (!user) {
      return res.status(404).json({
        error: 'Usu√°rio n√£o encontrado',
        message: 'Usu√°rio n√£o existe'
      });
    }

    let answeredQuestions = 0;
    let correctAnswers = 0;

    // Contar perguntas respondidas
    for (let day = 1; day <= 4; day++) {
      if (user[`response_q${day}`]) {
        answeredQuestions++;
        
        // Verificar se acertou (precisaria de uma tabela de respostas)
        // Por enquanto, vamos assumir que todas as respostas est√£o corretas
        correctAnswers++;
      }
    }

    res.json({
      success: true,
      stats: {
        totalQuestions: 4,
        answeredQuestions: answeredQuestions,
        correctAnswers: correctAnswers,
        xpAtual: user.xp_atual,
        erros: user.erros,
        accuracy: answeredQuestions > 0 ? (correctAnswers / answeredQuestions) * 100 : 0
      }
    });

  } catch (error) {
    console.error('Erro ao buscar estat√≠sticas:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      message: 'Erro ao buscar estat√≠sticas'
    });
  }
});

module.exports = router; 